// src/services/vehiculos.service.js
import FirebaseService from './firebase.service';

/**
 * Servicio para gesti√≥n de veh√≠culos con Firebase
 */
class VehiculosService extends FirebaseService {
  constructor() {
    super('/vehiculos');
  }

  /**
   * Obtiene todos los veh√≠culos
   * @returns {Promise<Array>} Lista de veh√≠culos con alertas
   */
  async obtenerTodos() {
    try {
      console.log('üöó Obteniendo todos los veh√≠culos...');
      const vehiculos = await this.get('');
      
      const vehiculosArray = this.ensureArray(vehiculos);
      console.log(`‚úÖ Veh√≠culos cargados: ${vehiculosArray.length}`);
      
      return vehiculosArray;
    } catch (error) {
      console.error('‚ùå Error al obtener veh√≠culos:', error);
      throw error;
    }
  }

  /**
   * Obtiene un veh√≠culo por ID con historial completo
   * @param {string} id - ID del veh√≠culo
   * @returns {Promise<Object>} Veh√≠culo con historial
   */
  async obtenerPorId(id) {
    try {
      console.log(`üöó Obteniendo veh√≠culo ID: ${id}`);
      const vehiculo = await this.get(`/${id}`);
      
      const vehiculoObj = this.ensureObject(vehiculo);
      console.log(`‚úÖ Veh√≠culo obtenido:`, vehiculoObj);
      
      return vehiculoObj;
    } catch (error) {
      console.error(`‚ùå Error al obtener veh√≠culo ${id}:`, error);
      throw error;
    }
  }

  /**
   * Crea un nuevo veh√≠culo
   * @param {Object} vehiculo - Datos del veh√≠culo
   * @returns {Promise<Object>} Veh√≠culo creado
   */
  async crear(vehiculo) {
    try {
      console.log('üÜï Creando veh√≠culo:', vehiculo);
      
      // Validaci√≥n b√°sica
      if (!vehiculo.patente || !vehiculo.marca || !vehiculo.modelo) {
        throw new Error('Patente, marca y modelo son requeridos');
      }
      
      const resultado = await this.post('', vehiculo);
      console.log('‚úÖ Veh√≠culo creado:', resultado);
      
      return resultado;
    } catch (error) {
      console.error('‚ùå Error al crear veh√≠culo:', error);
      throw error;
    }
  }

  /**
   * Actualiza un veh√≠culo
   * @param {string} id - ID del veh√≠culo
   * @param {Object} datos - Datos a actualizar
   * @returns {Promise<Object>} Respuesta de la actualizaci√≥n
   */
  async actualizar(id, datos) {
    try {
      console.log(`üîÑ Actualizando veh√≠culo ${id}:`, datos);
      
      const resultado = await this.put(`/${id}`, datos);
      console.log('‚úÖ Veh√≠culo actualizado:', resultado);
      
      return resultado;
    } catch (error) {
      console.error(`‚ùå Error al actualizar veh√≠culo ${id}:`, error);
      throw error;
    }
  }

  /**
   * Desactiva un veh√≠culo (soft delete)
   * @param {string} id - ID del veh√≠culo
   * @returns {Promise<Object>} Respuesta de la desactivaci√≥n
   */
  async eliminar(id) {
    try {
      console.log(`üóëÔ∏è Desactivando veh√≠culo ${id}`);
      const resultado = await this.delete(`/${id}`);
      console.log('‚úÖ Veh√≠culo desactivado:', resultado);
      
      return resultado;
    } catch (error) {
      console.error(`‚ùå Error al desactivar veh√≠culo ${id}:`, error);
      throw error;
    }
  }

  /**
   * Obtiene estad√≠sticas generales de la flota
   * @returns {Promise<Object>} Estad√≠sticas de la flota
   */
  async obtenerEstadisticas() {
    try {
      console.log('üìä Obteniendo estad√≠sticas de la flota...');
      const stats = await this.get('/estadisticas/resumen');
      
      const statsObj = this.ensureObject(stats);
      console.log('‚úÖ Estad√≠sticas obtenidas:', statsObj);
      
      return statsObj;
    } catch (error) {
      console.error('‚ùå Error al obtener estad√≠sticas:', error);
      return {
        total_vehiculos: 0,
        total_km_flota: 0,
        gastos_mes_actual: {
          combustible: 0,
          servicios: 0,
          varios: 0,
          total: 0
        },
        alertas_seguro: []
      };
    }
  }

  // === COMBUSTIBLE ===
  
  /**
   * Registra una carga de combustible
   * @param {Object} carga - Datos de la carga
   * @returns {Promise<Object>} Carga registrada
   */
  async registrarCombustible(carga) {
    try {
      console.log('‚õΩ Registrando carga de combustible:', carga);
      
      // Cambiar a la ruta de combustible
      const combustibleService = new FirebaseService('/combustible');
      const resultado = await combustibleService.post('', carga);
      
      console.log('‚úÖ Carga registrada:', resultado);
      return resultado;
    } catch (error) {
      console.error('‚ùå Error al registrar combustible:', error);
      throw error;
    }
  }

  /**
   * Obtiene historial de combustible
   * @param {Object} filtros - Filtros de b√∫squeda
   * @returns {Promise<Array>} Lista de cargas
   */
  async obtenerCombustible(filtros = {}) {
    try {
      console.log('‚õΩ Obteniendo historial de combustible:', filtros);
      
      const combustibleService = new FirebaseService('/combustible');
      const cargas = await combustibleService.get('', filtros);
      
      const cargasArray = this.ensureArray(cargas);
      console.log(`‚úÖ Cargas obtenidas: ${cargasArray.length}`);
      
      return cargasArray;
    } catch (error) {
      console.error('‚ùå Error al obtener combustible:', error);
      return [];
    }
  }

  /**
   * Obtiene estad√≠sticas de combustible por veh√≠culo
   * @param {string} vehiculoId - ID del veh√≠culo
   * @returns {Promise<Object>} Estad√≠sticas de combustible
   */
  async obtenerEstadisticasCombustible(vehiculoId) {
    try {
      console.log(`üìä Obteniendo estad√≠sticas de combustible para ${vehiculoId}`);
      
      const combustibleService = new FirebaseService('/combustible');
      const stats = await combustibleService.get(`/estadisticas/${vehiculoId}`);
      
      const statsObj = this.ensureObject(stats);
      console.log('‚úÖ Estad√≠sticas de combustible:', statsObj);
      
      return statsObj;
    } catch (error) {
      console.error('‚ùå Error al obtener estad√≠sticas de combustible:', error);
      return {
        total_cargas: 0,
        total_litros: 0,
        total_gastado: 0,
        consumo_promedio: 0,
        precio_promedio_litro: 0,
        km_recorridos: 0
      };
    }
  }

  // === SERVICIOS ===
  
  /**
   * Registra un servicio/mantenimiento
   * @param {Object} servicio - Datos del servicio
   * @returns {Promise<Object>} Servicio registrado
   */
  async registrarServicio(servicio) {
    try {
      console.log('üîß Registrando servicio:', servicio);
      
      const serviciosService = new FirebaseService('/servicios-vehiculos');
      const resultado = await serviciosService.post('', servicio);
      
      console.log('‚úÖ Servicio registrado:', resultado);
      return resultado;
    } catch (error) {
      console.error('‚ùå Error al registrar servicio:', error);
      throw error;
    }
  }

  /**
   * Obtiene historial de servicios
   * @param {Object} filtros - Filtros de b√∫squeda
   * @returns {Promise<Array>} Lista de servicios
   */
  async obtenerServicios(filtros = {}) {
    try {
      console.log('üîß Obteniendo historial de servicios:', filtros);
      
      const serviciosService = new FirebaseService('/servicios-vehiculos');
      const servicios = await serviciosService.get('', filtros);
      
      const serviciosArray = this.ensureArray(servicios);
      console.log(`‚úÖ Servicios obtenidos: ${serviciosArray.length}`);
      
      return serviciosArray;
    } catch (error) {
      console.error('‚ùå Error al obtener servicios:', error);
      return [];
    }
  }

  /**
   * Actualiza un servicio
   * @param {string} id - ID del servicio
   * @param {Object} datos - Datos a actualizar
   * @returns {Promise<Object>} Respuesta de la actualizaci√≥n
   */
  async actualizarServicio(id, datos) {
    try {
      console.log(`üîß Actualizando servicio ${id}:`, datos);
      
      const serviciosService = new FirebaseService('/servicios-vehiculos');
      const resultado = await serviciosService.put(`/${id}`, datos);
      
      console.log('‚úÖ Servicio actualizado:', resultado);
      return resultado;
    } catch (error) {
      console.error(`‚ùå Error al actualizar servicio ${id}:`, error);
      throw error;
    }
  }

  // === GASTOS ===
  
  /**
   * Registra un gasto del veh√≠culo
   * @param {Object} gasto - Datos del gasto
   * @returns {Promise<Object>} Gasto registrado
   */
  async registrarGasto(gasto) {
    try {
      console.log('üí∞ Registrando gasto:', gasto);
      
      const gastosService = new FirebaseService('/gastos-vehiculos');
      const resultado = await gastosService.post('', gasto);
      
      console.log('‚úÖ Gasto registrado:', resultado);
      return resultado;
    } catch (error) {
      console.error('‚ùå Error al registrar gasto:', error);
      throw error;
    }
  }

  /**
   * Obtiene historial de gastos
   * @param {Object} filtros - Filtros de b√∫squeda
   * @returns {Promise<Array>} Lista de gastos
   */
  async obtenerGastos(filtros = {}) {
    try {
      console.log('üí∞ Obteniendo historial de gastos:', filtros);
      
      const gastosService = new FirebaseService('/gastos-vehiculos');
      const gastos = await gastosService.get('', filtros);
      
      const gastosArray = this.ensureArray(gastos);
      console.log(`‚úÖ Gastos obtenidos: ${gastosArray.length}`);
      
      return gastosArray;
    } catch (error) {
      console.error('‚ùå Error al obtener gastos:', error);
      return [];
    }
  }

  /**
   * Elimina un gasto
   * @param {string} id - ID del gasto
   * @returns {Promise<Object>} Respuesta de la eliminaci√≥n
   */
  async eliminarGasto(id) {
    try {
      console.log(`üóëÔ∏è Eliminando gasto ${id}`);
      
      const gastosService = new FirebaseService('/gastos-vehiculos');
      const resultado = await gastosService.delete(`/${id}`);
      
      console.log('‚úÖ Gasto eliminado:', resultado);
      return resultado;
    } catch (error) {
      console.error(`‚ùå Error al eliminar gasto ${id}:`, error);
      throw error;
    }
  }
}

export default new VehiculosService();