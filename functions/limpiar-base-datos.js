// limpiar-base-datos.js - Script para eliminar todos los clientes y datos relacionados
// ‚ö†Ô∏è SOLO PARA ENTORNO DE PRUEBA - ELIMINA DATOS PERMANENTEMENTE

const admin = require('firebase-admin');

// Configurar Firebase Admin (aseg√∫rate de tener las credenciales)
// Si ya tienes Firebase inicializado en otro lugar, comenta estas l√≠neas
/*
const serviceAccount = require('./path/to/your/service-account-key.json');
admin.initializeApp({
  credential: admin.credential.cert(serviceAccount)
});
*/

const db = admin.firestore();

/**
 * Elimina todos los documentos de una colecci√≥n en lotes
 * @param {string} collectionName - Nombre de la colecci√≥n
 * @param {number} batchSize - Tama√±o del lote (m√°ximo 500)
 */
async function eliminarColeccion(collectionName, batchSize = 100) {
  const collectionRef = db.collection(collectionName);
  
  try {
    console.log(`üîÑ Iniciando eliminaci√≥n de colecci√≥n: ${collectionName}`);
    let totalEliminados = 0;
    
    while (true) {
      // Obtener un lote de documentos
      const snapshot = await collectionRef.limit(batchSize).get();
      
      if (snapshot.size === 0) {
        console.log(`‚úÖ Colecci√≥n ${collectionName} completamente eliminada. Total: ${totalEliminados} documentos`);
        break;
      }
      
      // Crear batch para eliminar
      const batch = db.batch();
      snapshot.docs.forEach(doc => {
        batch.delete(doc.ref);
      });
      
      // Ejecutar batch
      await batch.commit();
      totalEliminados += snapshot.size;
      
      console.log(`   Eliminados ${snapshot.size} documentos de ${collectionName} (Total: ${totalEliminados})`);
      
      // Pausa peque√±a para no sobrecargar
      await new Promise(resolve => setTimeout(resolve, 100));
    }
  } catch (error) {
    console.error(`‚ùå Error eliminando colecci√≥n ${collectionName}:`, error);
    throw error;
  }
}

/**
 * Elimina todas las subcolecciones de una colecci√≥n
 * @param {string} collectionName - Nombre de la colecci√≥n padre
 * @param {string} subCollectionName - Nombre de la subcolecci√≥n
 */
async function eliminarSubcolecciones(collectionName, subCollectionName) {
  try {
    console.log(`üîÑ Eliminando subcolecciones ${subCollectionName} de ${collectionName}`);
    
    const parentDocs = await db.collection(collectionName).get();
    let totalEliminadas = 0;
    
    for (const parentDoc of parentDocs.docs) {
      const subCollectionRef = parentDoc.ref.collection(subCollectionName);
      const subDocs = await subCollectionRef.get();
      
      if (subDocs.size > 0) {
        const batch = db.batch();
        subDocs.docs.forEach(doc => {
          batch.delete(doc.ref);
        });
        await batch.commit();
        totalEliminadas += subDocs.size;
      }
    }
    
    console.log(`‚úÖ Eliminadas ${totalEliminadas} subcolecciones ${subCollectionName}`);
  } catch (error) {
    console.error(`‚ùå Error eliminando subcolecciones:`, error);
  }
}

/**
 * Script principal de limpieza
 */
async function limpiarBaseDatos() {
  console.log('üöÄ INICIANDO LIMPIEZA COMPLETA DE BASE DE DATOS');
  console.log('‚ö†Ô∏è  ADVERTENCIA: Esta operaci√≥n eliminar√° TODOS los datos de clientes y relacionados');
  console.log('‚ö†Ô∏è  Solo usar en entorno de PRUEBA');
  console.log('');
  
  const inicioTiempo = Date.now();
  
  try {
    // 1. Eliminar pagos de ventas (subcolecciones)
    console.log('üìù Paso 1: Eliminando pagos de ventas...');
    await eliminarSubcolecciones('ventas', 'pagos');
    
    // 2. Eliminar ventas
    console.log('üìù Paso 2: Eliminando ventas...');
    await eliminarColeccion('ventas');
    
    // 3. Eliminar movimientos de stock relacionados con ventas de clientes
    console.log('üìù Paso 3: Eliminando movimientos de stock...');
    await eliminarColeccion('movimientos_stock');
    
    // 4. Eliminar clientes
    console.log('üìù Paso 4: Eliminando clientes...');
    await eliminarColeccion('clientes');
    
    // 5. Limpiar contadores relacionados (opcional)
    console.log('üìù Paso 5: Limpiando contadores...');
    try {
      await db.collection('contadores').doc('ventas').delete();
      console.log('   ‚úÖ Contador de ventas eliminado');
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Contador de ventas no exist√≠a');
    }
    
    const tiempoTotal = ((Date.now() - inicioTiempo) / 1000).toFixed(2);
    
    console.log('');
    console.log('üéâ LIMPIEZA COMPLETADA EXITOSAMENTE');
    console.log(`‚è±Ô∏è  Tiempo total: ${tiempoTotal} segundos`);
    console.log('');
    console.log('‚úÖ Datos eliminados:');
    console.log('   ‚Ä¢ Todos los clientes');
    console.log('   ‚Ä¢ Todas las ventas');
    console.log('   ‚Ä¢ Todos los pagos');
    console.log('   ‚Ä¢ Movimientos de stock');
    console.log('   ‚Ä¢ Contadores relacionados');
    console.log('');
    console.log('üöÄ Base de datos lista para nueva importaci√≥n');
    
  } catch (error) {
    console.error('‚ùå ERROR DURANTE LA LIMPIEZA:', error);
    console.log('');
    console.log('üîß La limpieza puede haberse completado parcialmente.');
    console.log('   Puedes ejecutar el script nuevamente para continuar.');
    process.exit(1);
  }
}

/**
 * Funci√≥n para confirmar la eliminaci√≥n
 */
async function confirmarEliminacion() {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise((resolve) => {
    rl.question('¬øEst√°s seguro de eliminar TODOS los clientes y datos relacionados? (escribe "ELIMINAR TODO" para confirmar): ', (respuesta) => {
      rl.close();
      resolve(respuesta === 'ELIMINAR TODO');
    });
  });
}

/**
 * Ejecutar script
 */
async function ejecutar() {
  try {
    console.log('‚ö†Ô∏è  SCRIPT DE LIMPIEZA DE BASE DE DATOS ‚ö†Ô∏è');
    console.log('');
    console.log('Este script eliminar√° PERMANENTEMENTE:');
    console.log('‚Ä¢ Todos los clientes');
    console.log('‚Ä¢ Todas las ventas');
    console.log('‚Ä¢ Todos los pagos');
    console.log('‚Ä¢ Movimientos de stock');
    console.log('');
    
    // Confirmar eliminaci√≥n
    const confirmado = await confirmarEliminacion();
    
    if (!confirmado) {
      console.log('‚ùå Operaci√≥n cancelada por el usuario');
      process.exit(0);
    }
    
    // Esperar 3 segundos para que el usuario pueda cancelar
    console.log('‚è≥ Iniciando en 3 segundos... (Ctrl+C para cancelar)');
    await new Promise(resolve => setTimeout(resolve, 1000));
    console.log('‚è≥ 2...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    console.log('‚è≥ 1...');
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Ejecutar limpieza
    await limpiarBaseDatos();
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Error fatal:', error);
    process.exit(1);
  }
}

// Solo ejecutar si es llamado directamente
if (require.main === module) {
  ejecutar();
}

module.exports = {
  limpiarBaseDatos,
  eliminarColeccion,
  eliminarSubcolecciones
};